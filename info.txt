- React : Libreria 

- Node.js : Entorno de ejecución para JavaScript, viene con un sub programa que me permite instalar paquetes(librerias/plugins/frameworks) de node

- NPM : Node Package Manager, gestor de paquetes de node (como el PIP de python, o el composer de php, o el, o el gem de ruby, el maven de java, etc)

    Instalacion con NPM : 


        npm {install|i} [tipo] {nombre_paquete}

        TIPOS DE INSTALACION 
            Locales (default) : Instalacion en el directorio actual
                -S | --save 
                -D | --save-dev

            Ejemplos : 
                npm i -D react
                npm i -S react

            Globales

                -g | --global

            Ejemplos :

                npm i -g react


- create-react-app : Herramienta para crear aplicaciones de React. Instala babel y webpack y los configura automaticamente

- Transpilador : Babel

- Empaquetador (Bundler) : Webpack

JSX : Sintaxis de React <p>

bundle.js : Archivo que contiene todo el código de la aplicación


optimización (acota variables) y minimización de código
CLI : Interfaz de línea de comandos
GUI : Interfaz gráfica de usuario

Chocolatey : Administrador de paquetes para Windows

https://www.youtube.com/watch?v=X34ZmkeZDos&ab_channel=JomaTech




METODO 1
1) npm i -g create-react-app
2) create-react-app {nombre_proyecto}
3) cd {nombre_proyecto}
4) npm start (live server)



METODO 2
1) npx create-react-app {nombre_proyecto}
2) cd {nombre_proyecto}
3) npm start (live server)



CREATE-REACT-APP y WEBPACK : 

Todos los proyectos arrancan con un archivo index.js que es el punto de entrada de la aplicación. Este archivo se encarga de importar el resto de archivos de la aplicación y de renderizarlos en el DOM.


VITE : 

Todos los proyectos arrancan con un archivo main.jsx






JSX : 


function foo(a){

}

foo()  === <foo/>  === <foo></foo>

function Header(){
    return <h1>Titulo</h1>
}




<header/>

<Header/>



COMPONENTES : 

1 - Son funciones
2 - Estan en mayuscula
3 - Tienen retorno
4 - Tienen un solo elemento de retorno



PARA LA PROXIMA CLASE!

//Decirle a Carlos que es el article!



PARA EL PROYECTO : 

src/
    |_index.js
    |__ components/
        |__ App.js
        |__ Header.js
        |__ Footer.js
        |__ Main.js
        |__ Counter.js
        |__ Button.js
        |__ Input.js
        |__ Search.js
        |__ Nav.js





PARA LA VIDA REAL SEGUN EL PROFE : 

src/
    |_api
        |_axios/
            |_axios.js
        |_providers/
            |_AuthProvider.js
            |_ThemeProvider.js
            |_MessagesProvider.js
    |_ui/
       |_layout/
            |_App.js
            |_Header.js
            |_Footer.js
            |_Main.js
    
        |_pages/
            |_Home.js
            |_About.js
            |_Contact.js
            |_Login.js
            |_Register.js
            |_NotFound.js
        |_widgets|components/
            |_Counter.js
            |_NavBav.js
            |_Search.js
            |_Button.js
            |_Input.js



SNIPPET PARA COMPONENTES :  "rafce"


SASS / BEM

Bootstrap 

https://react-bootstrap.github.io/
https://reactstrap.github.io/?path=/story/home-installation--page

TailwindCSS - Antd - MUI


TIPOS DE COMPONENTES : 

    - Estructurales : Representan grandes partes de la aplicacion (Header, Footer, Main, etc)
    - Reusabilidad : 
    - Funcionalidad : 
        - Container Pattern : 
                - Container 
                - Presentacionales



Reutilizables y Dinamicas




function Nav(parametros){

}


Nav({x:1})
Nav({z:2, y:3})


DESTRUCTURING : 

    tengo un objeto con propiedades, las quiero usar a todas pero escribir menos
    tengo un array con valores, las quiero usar a todas pero escribir menos


const nombre = "Carlos"
const apellido = "Gonzalez"
const edad = 30

const arr = [x,y,z]

const [monstrutroDeLaRama,monstruoTerrenal] = arr

const monstrutroDeLaRama = arr[0]
const dos = arr[1]
const tres = arr[2]











const obj = {x:1, y:2, z:3}

const {propYaExt:variableNueva} = obj


//Si hubiera una propiedad llamada "y"(izquierda) en el objeto, la asignaria a la variable "y"(derecha)

const {y:y,x:x,z:z} = obj

const x = obj.x
const y = obj.y
const z = obj.z







Object Properties Shorthand :

const nombre = "Horacio"

const persona = {
    nombre : nombre (?
}


const persona = { nombre }

const {y:y,x:x,z:z} = obj
const {y,x,z} = obj


PWA : Progressive Web Apps




class App {
    constructor(){
        this.state = {
           nombre : "Carlos"
        }
    }
}


const App = () => {

}



Listado de Hooks de react : 

    - useState : Me da un estado reactivo nuevo en un componente

        Siempre me retorna un array 


        useState()  =>   [a,b]  == el useState siempre que se ejecuta me da un array con dos cosas. La primera se llena con lo que esta entre parentesis y la segunda se llena con una funcion anonima que me permite cambiar el valor de a

        ej : 

        useState()  => [undefined,()=>{}]

        useState(0)  => [0,()=>{}]

        useState("horacio")  => ["horacio",()=>{}]


    - useReducer : Me da un estado reactivo nuevo en un componente



    - useRef : Me da un estado no reactivo nuevo en un componente
    
    
    - useEffect : Controla el "ciclo de vida" de un componente. Por default , se ejecuta cada vez que el componente se renderiza.

        ej : 

            useEffect(a [,b]) =>  useEffect(funcion,array)
            useEffect(funcion,array de dependencias)

            const handleAlgo = () => {}


            useEffect(()=>{}) : Este ejectuca su parametro a tantas veces como el componente se reejecute
            useEffect(handleAlgo)

            useEffect(()=>{},[]) : Este ejecuta su parametro a una unica vez, solo cuando el componente se monto

            useEffect(()=>{},[nombre]) : Este ejecuta su parametro a cada vez que el valor de nombre cambie


    - useContext

    - useCallback
    - useMemo



CICLO DE VIDA : 


MOUNT / Montado / Montaje

    - constructor
    - render
    - componentDidMount


UPDATE / Actualizacion : 

    Puede pasar por los siguientes factores : 

        - Cambio de estado
        - Cambio de props
        - Cambio de contexto
        - Cambio de padre



    - render
    - componentDidUpdate


UNMOUNT / Desmontado / Desmontaje

    - componentWillUnmount






class App extends React.Component {

    constructor(){}

    

    render(){}

}












import { useEffect, useState } from "react"

const ItemListContainer = (props) => {

    const [counter, setCounter] = useState(0) 

    const [minPrice, setMinPrice] = useState(1000)
    const [open, setOpen] = useState(false)
    const [loadMore, setLoadMore] = useState(false)
    const [searchText, setSearchText] = useState("")


    useEffect(()=>{
        console.log("useEffect")
    })



    const handleClick = () => {
        setCounter(counter + 1)
    }

    const handleOnChange = (e) => {
        setSearchText(e.target.value)
    }

    const handleToggleDrawer = () => {
        setOpen(!open)
    }

    return (
        <div>
            {props.greeting}
            <p>Contador : {counter}</p>
            <p>Texto a buscar : {searchText}</p>
            <p>Drawer Open : {open ? "Abierto" : "Cerrado"}</p>
            <button onClick={handleClick} >sumar</button>
            <button onClick={handleToggleDrawer}>toggle drawer</button>
            <input onChange={handleOnChange} type="text" />
        </div>
    )
}


export default ItemListContainer







document.addEventListener("click",()=>{
    console.log("1")
})

console.log("2")




Promise : 
FETCH / AJAX

Promise.then()
Promise.catch()
Promise.finally()
Promise.all([])
Promise.race([])



const a = caches.open() //Se abre una particion nueva del cache
const a = fetch() //Enviar (enviar/pedir) una solicitud (request) a un servidor


const promise = new Promise()

promise.then(()=>{})

promise.catch(()=>{})

promise.finally(()=>{})


PROTOCOLO HTTP/S



REQUEST
    
    URL/IP  : http://google.com
    METODO/VERBO : GET - POST - PUT/PATCH - DELETE - ...
    VERSION : http/1.1

    HEADERS(op)

        Accept : text/html
        Authorization : Bearer 589y987d9h98gy95hjouihbirtkn

    BODY(op(POST/PUT/PATCH)){}


RESPONSE

    STATUS CODE : 1xx - 2xx - 3xx - 4xx - 5xx
    STATUS MESSAGE : 404 Not Found - 500 Internal Server Error
    VERSION : http/1.1
    HEADERS : 
            
            Content-Type : text/html
            Content-Lenght : 87658768543
            Access-Control-Allow-Origin : http://localhost

    BODY (op)

google.com/test
google.com/test1




Fecth + Promise

fetch(url[,config])

fetch("http://google.com")


CORS : Cross Origin Resource Sharing



API REST


const pedido = fetch("imagen.jpg")

pedido.then(()=>{

})

pedido.catch(()=>{

})


fetch('https://fakestoreapi.com/products')
            .then(res=>res.json())
            .then(json=>console.log(json))







            import { useEffect, useState } from "react"


const ItemListContainer = (props) => {

    const [cargo, setCargo] = useState(false)
    const [productos, setProductos] = useState([])//este es el que obtengo al principio y sobre el cual filtro y NUNCA cambio, por si los filtros se reinician
    const [productosFiltrados, setProductosFiltrados] = useState([])//Este es el que muestro en pantalla y voy pisando todo el tiempo

    useEffect(() => {

        console.log("Pido algo a la base de datos")

        setTimeout(() => {

            console.log("Termino de pedir algo a la base de datos")

            const ejemploProductos = [
                { id: 1, nombre: "Televisor", precio: 100, categoria: "electronico" },
                { id: 2, nombre: "Pantalon", precio: 200, categoria: "ropa" },
                { id: 3, nombre: "Mouse", precio: 300, categoria: "electronico" }
            ]

            setCargo(true)
            setProductos(ejemploProductos)
            setProductosFiltrados(ejemploProductos)

        }, 2000)

    }, [])

/* 
    useEffect(()=>{

    },[filtroNombre])




    useEffect(()=>{

    },[filtroCat])

 */




    /* 
    const productosEnJSX = productos.map(producto => (
        <>
        </>
    )) 
    */

    //create a function that filters the products using the price

    //const pf = [...productos]

    const arr = [1, 2, 3]

    //const copia = [arr]  // [ 0 : [1,2,3] ]
    //const copia = [...arr] //

    //arr // [1,2,3]
    //...arr //  1,2,3

    //obj // {x:1,y:2}
    //...obj //  x:1 , y:2

    /* const handleChangeName = (e) => {
        console.dir(e.target)
        const copia = productos.filter(producto => {
            return producto.nombre.toLowerCase().includes(e.target.value.toLowerCase())
        })
        setProductosFiltrados(copia)
    }

    const handleChangePrice = (e) => {
        const copia = productos.filter(producto => {
            return producto.precio > Number(e.target.value)
        })
        setProductosFiltrados(copia)
    }

    const handleChangeCategory = (e) => {
        console.log(e.target.value)
        const copia = productos.filter(producto => {
            //producto.categoria == ??
        })
        setProductosFiltrados(copia)
    }
 */

    const handleFilter = e => {
        console.log(e.target.dataset.filter)
        const copia = productos.filter(producto => {
            if(e.target.dataset.filter == "nombre"){
                return producto.nombre.toLowerCase().includes(e.target.value.toLowerCase())
            }

            if(e.target.dataset.filter == "precio"){
                return producto.precio > Number(e.target.value)
            }

            else {
                return producto.categoria == e.target.value
            }
        })
        setProductosFiltrados(copia)
    }
    return (
        <section>
            {!cargo ? "Cargando..." : "Termino de cargar"}
            {cargo ? "Termino de cargar" : "Cargando..."}
            <nav>
                <input data-filter="nombre" onChange={handleFilter} type="text" placeholder="Nombre del producto" />
                <input data-filter="precio" onChange={handleFilter} type="number" placeholder="mayor a" />
                <select data-filter="categoria" onChange={handleFilter}>
                    <option value="todos">Todos</option>
                    <option value="electronico">Electronico</option>
                    <option value="ropa">Ropa</option>
                </select>
            </nav>
            {productosFiltrados.map(producto => (
                <article>
                    <h2>{producto.nombre}</h2>
                    <p>$ {producto.precio}</p>
                    <p>{producto.categoria}</p>
                </article>
            ))}
            {/* productosEnJSX */}
            {/* {
                productos.map(function(producto){
                    return <></>
                })
            } */}
        </section>
    )
}


export default ItemListContainer


useEffect , useMemo , useCallback 




/* carrito = 1
        carrito.push()
        const copia = carrito
        copia.push() */

        //const copia = carrito.slice(0)
        //copia.push(producto)

        //OPERADOR REST/SPREAD (...)

        //const arr = [1,2,3]

        //const copia = [ arr ] //[[1,2,3]]

        //setCarrito(carrito = 1)
        //setCarrito(carrito.push())









https://firebase.google.com/docs/reference/js?authuser=0&hl=en


https://firebase.google.com/docs/reference/js/firestore_.md?authuser=0&hl=en#@firebase/firestore


doc - getDoc - getDocs - where - query - collection - addDoc


Paso a paso de pedidos a firebase : 


1) Entro a la pagina de firebase : npm i firebase
2) Hago login a la consola : initializeApp() => FirebaseApp
3) Hago click en Firestore al costado : getFirestore(FirebaseApp) => Firestore
4) Selecciono la coleccion a trabajar : collection(Firestore,nombre) => CollectionReference
5) Hago la consultas : getDocs , getDoc , updateDoc , deleteDoc , addDoc (ABM|CRUD)

const pedido = getDocs(CollectionReference,query) => Promise
const pedido = getDoc(?) => Promise
const pedido = updateDoc(CollectionReference,docId,datos) => Promise
const pedido = deleteDoc(CollectionReference,docId) => Promise
const pedido = addDoc(CollectionReference,datos) => Promise


productos.forEach(producto=>{
    addDoc(productsCollection,producto)
})













class App {

    constructor(props){
        this.state = {
            nombre: "Juan",
            apellido: "Perez"
        }
    }

    componentDidMount(){state
        this.setState0
        ({})
    }

    shouldComponentUpdate(){}

    componentDidUpdate(){}

    componentWillUnmount(){}

    render(){

    }

}






function App (props){

    useEffect(()=>{

    },[])

    return (
        <></>
    )
}


const App = (props) => {

    useEffect(()=>{

    },[])

    return (
        <></>
    )
}





TOASTIFY IMPLEMENTACION : 

1) instalar la libreria
2) importar la hoja de estilos
3) poner el componente ToastContainer
4) toast()

source / md /  gif/video/gif-imagenes en doco/link al deploy en la doco


4 - documentacion

https://github.com/adam-p/markdown-here/wiki/Markdown-Cheatsheet

    - Descripcion del proyecto 
    - Tecnologias usadas

GIF/Video

1 - build  
2 - deploy
3 - .env